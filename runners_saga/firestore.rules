rules_version='2'

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Helper function to validate run data structure for writes
    function hasValidRunFields(data) {
      return data.keys().hasAll(['userId', 'totalDistance', 'totalTime', 'createdAt', 'status']) &&
             data.userId is string &&
             data.totalDistance is number &&
             data.totalTime is number &&
             data.createdAt is timestamp &&
             data.status in ['completed', 'in_progress', 'not_started'];
    }
    
    // Helper function to validate user data structure for writes
    function hasValidUserFields(data) {
      return data.keys().hasAll(['email', 'createdAt']) &&
             data.email is string &&
             data.createdAt is timestamp;
    }
    
    // Users collection - users can only access their own data
    match /users/{userId} {
      // READ: owner may read their own user doc
      allow read: if isOwner(userId);

      // CREATE: must be authenticated, owner (doc id == uid), and data valid
      allow create: if isAuthenticated() && userId == request.auth.uid && hasValidUserFields(request.resource.data);

      // UPDATE: owner and data valid
      allow update: if isOwner(userId) && hasValidUserFields(request.resource.data);

      // DELETE: owner only
      allow delete: if isOwner(userId);
    }
    
    // Runs collection - users can only access their own runs
    match /runs/{runId} {
      // READ: allow owner to read their runs (no write validation on reads)
      allow read: if isOwner(resource.data.userId);

      // CREATE: must be authenticated, owner, and data must be valid
      allow create: if isAuthenticated() &&
                       request.resource.data.userId == request.auth.uid &&
                       hasValidRunFields(request.resource.data);

      // UPDATE: user must own the existing doc and the new data must be valid
      allow update: if isOwner(resource.data.userId) &&
                       hasValidRunFields(request.resource.data);

      // DELETE: owner only
      allow delete: if isOwner(resource.data.userId);
    }
    
    // Episodes collection - read-only for all authenticated users
    match /episodes/{episodeId} {
      allow read: if isAuthenticated();
      allow write: if false; // Episodes are managed by admin only
    }
    
    // Seasons collection - read-only for all authenticated users
    match /seasons/{seasonId} {
      allow read: if isAuthenticated();
      allow write: if false; // Seasons are managed by admin only
    }
    
    // Progress collection - users can only access their own progress
    match /progress/{progressId} {
      allow read, write: if isOwner(resource.data.userId);
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid;
    }
    
    // Deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
